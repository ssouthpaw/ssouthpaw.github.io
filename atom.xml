<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ssouthpaw</title>
  
  <subtitle>Ssouthpaw BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ssouthpaw.github.io/"/>
  <updated>2017-12-06T17:36:35.000Z</updated>
  <id>https://ssouthpaw.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Execution Context</title>
    <link href="https://ssouthpaw.github.io/2017/11/30/javascript.execution.context/"/>
    <id>https://ssouthpaw.github.io/2017/11/30/javascript.execution.context/</id>
    <published>2017-11-29T18:07:59.000Z</published>
    <updated>2017-12-06T17:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- # What is the Execution Context & Stack in JavaScript? --><h1 id="자바스크립트에서-실행-컨텍스트-Execution-Context-와-Stack은-무엇일까"><a href="#자바스크립트에서-실행-컨텍스트-Execution-Context-와-Stack은-무엇일까" class="headerlink" title="자바스크립트에서 실행 컨텍스트(Execution Context) 와 Stack은 무엇일까?"></a>자바스크립트에서 실행 컨텍스트(Execution Context) 와 Stack은 무엇일까?</h1><p>이 포스팅에서는 자바스크립트의 가장 본질적인 부분 중의 하나인 <strong>Execution Context</strong>에 대하여 살펴볼 것입니다.</p><!-- ## What is the Execution Context? --><h2 id="Execution-Context-실행-컨텍스트-란-무엇인가"><a href="#Execution-Context-실행-컨텍스트-란-무엇인가" class="headerlink" title="Execution Context(실행 컨텍스트)란 무엇인가?"></a>Execution Context(실행 컨텍스트)란 무엇인가?</h2><p>자바스크립트(이하 JS)에서 코드가 동작할때, 코드가 동작하는 환경은 매우 중요합니다.<br>그 환경은 아래 3가지 경우가 될 수 있습니다.</p><ul><li>Global code - 코드가 처음 실행되는 가장 기본적인 환경</li><li>Function code - 코드의 실행 흐림이 함수의 Body에 들어갈의 환경</li><li>Eval Code - eval 함수의 내부에서 실행될때의 환경</li></ul><blockquote><p>Eval 함수란 ?<br><code>eval(stringCode:string)</code> 형태로 사용되며 JS parser에 의해 구문이 분석되고 실행됨<br>JSON.parse를 활용하는 것이 eval 함수보다 안전하고 실행 속도도 빠름.<br>More info : <a href="https://msdn.microsoft.com/ko-kr/library/12k71sw7(v=vs.94" target="_blank" rel="noopener">MSDN</a>.aspx)  </p><p><strong>Global</strong> 이란?<br>JS에서 Global은 function의 바깥을 의미하고, Scope Chain에 의해 어떠한 Context에서도<br>접근이 가능한 영역을 의미합니다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global Execution Context Start</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function Execution Context Start(1)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = <span class="string">'Jonh'</span>;</span><br><span class="line">    <span class="keyword">var</span> lastName = <span class="string">'Doe'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function Execution Context Start(2)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getFirstName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function Execution Context Start(3)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getLastName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(hello + getFirstName() + <span class="string">''</span> + getLastName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person();</span><br><span class="line"><span class="comment">// Global Execution Context End</span></span><br></pre></td></tr></table></figure><p>위 코드는 1개의 Global Context와  3개의 서로 다른 Execution Context를 가지고 있다.<br>여기에는 단 1개의 Global Context만이 존재하고, Global은 어디서든 접근할 수 있습니다.</p><p>Function이 선언된 수 만큼 Cotext를 가질 수 있고, 각각의 function이 호출 될때마다 새로운 Context가 생겨납니다. 이 Context들은 각각 함수 범위 외부에서 직접적으로 접근할 수 없는 private scope를 가지게 됩니다.<br><strong>그러나 외부의 변수와 함수에는 접근이 가능합니다.</strong></p><p>예를들어 위 코드에서 <code>person</code> 바깥에서는 <code>getFirstName</code>을 호출할 수 없다는 것입니다.</p><h2 id="Execution-Context-Stack"><a href="#Execution-Context-Stack" class="headerlink" title="Execution Context Stack"></a>Execution Context Stack</h2><p>![Image of stack]<br>(<a href="http://davidshariff.com/blog/wp-content/uploads/2012/06/ecstack.jpg" target="_blank" rel="noopener">http://davidshariff.com/blog/wp-content/uploads/2012/06/ecstack.jpg</a>)</p><p>JS는 Single thread 방식으로 실행되며, 브라우져에서도 마찬가지입니다.<br>이것은 한번에 단 한개의 것만 실행됨을 의미합니다. 그리고 다른 action이나 event들은<br>queue에 쌓이게 됩니다. 이것을 Execution Stack이라고 부릅니다.<br>위 그림은 Single Thread Stack을 추상화한 그림입니다.</p><p>이미 알다시피, 작성한 스크립트가 브라우저에 로딩되면,기본적으로 Global Execution Context가 제어권을 가지게 됩니다.</p><p>만약 Global code에서 function을 호출하게되면, 새로운 Execution Context를 생성하고 이를 Execution Stack의 맨 위로 쌓게됩니다.</p><p>이 function 내부에서 또 다른 function을 호출하면 같은 일이 반복됩니다.<br>코드의 실행흐름은 다시 내부의 함수로 이동하고, 새로운 Execution Context를 만들어 Stack에 쌓게 됩니다.</p><p>브라우져는 항상 Stack의 가장 위의 Execution Context를 실행시키고, 그 안에 존재하던 function이 완료되면 Stack에서 해당 Exectuion Context를 제거합니다.<br>이후 그 아래의 context가 제어권을 돌려받습니다.<br>아래의 즉시 실행함수와 그림을 통해 이를 이해할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        foo(++i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>![Image of stack]<br>(<a href="http://davidshariff.com/blog/wp-content/uploads/2012/06/es1.gif" target="_blank" rel="noopener">http://davidshariff.com/blog/wp-content/uploads/2012/06/es1.gif</a>)</p><p>이 코드는 i의 값을 1씩 증가시키며 자기 자신을 3번 호출합니다.<br>foo가 호출될 때 마다 새로운 Execution Context가 생성되고, 실행이 끝나면 큐에서 빠져나오고 아래의 컨텍스트로 제어권이 넘어갑니다.</p><p>여기서 Execution Stack과 관련한 중요한 5가지 포인트가 존재합니다.</p><ol><li>Single threaded</li><li>동기적 발생 (Synchronous execution).</li><li>Global context</li><li>Infinite function contexts<ul><li>브라우져가 꺼질때까지 Global Context는 없어지지 않고 계속 존재함</li></ul></li><li>모든 function은 언제나 Exectuion Context를 만들며, 자기자신을 부를때도 마찬가지이다.</li></ol><h2 id="Execution-Context-in-Detail"><a href="#Execution-Context-in-Detail" class="headerlink" title="Execution Context in Detail"></a>Execution Context in Detail</h2><p>function이 실행될 때마다 새로운 Execution Context가 만들어진다. </p><p>그런데 여기서 중요한 점은 JS 내부적으로 모든 Context는 2개의 단계를 가진다는 것이다.<br>(Create Phases, Execution phases)</p><ol><li><p><strong>Creation Phases</strong></p><ul><li>function이 호출되었으나 실행되지 않은 상태</li><li><strong>Scope Chain, Variables, functions, arguments</strong> 등을 생성,</li><li><strong>this*</strong>의 값을 정함.</li></ul></li><li><p><strong>활성화 및 코드 실행 단계</strong></p><ul><li>Variables에 값을 정의<!-- * function의 references를 하고 이를 해석, --></li><li>코드를 실행.</li></ul></li></ol><p>이러한 Execution Context는 개념적으로 3개의 프로퍼티를 가진 Object로 설명이가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">executionContextObj = &#123;</span><br><span class="line">    <span class="string">'scopeChain'</span>: &#123; <span class="comment">/* variableObject + all parent execution context's variableObject */</span> &#125;,</span><br><span class="line">    <span class="string">'variableObject'</span>: &#123; <span class="comment">/* function arguments / parameters, inner variable and function declarations */</span> &#125;,</span><br><span class="line">    <span class="string">'this'</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="활성화-변수-객채-Activation-Variable-Object-AO-VO"><a href="#활성화-변수-객채-Activation-Variable-Object-AO-VO" class="headerlink" title="활성화 / 변수 객채 (Activation / Variable Object [AO/VO])"></a>활성화 / 변수 객채 (Activation / Variable Object [AO/VO])</h2><p>위의 <code>executionContextObj</code>는 정말 function이 실행되어지고 있기 전에 function이 호출될 때 만들어진다. 즉, Createion Phases를 의미한다.<br>JS는 함수를 통과하는 parameter와 arguments, 함수 선언, 지역 변수 선언등을 를 스캔함으로서 sexecutionContextObj를 생성한다.<br>이러한 스캔의 결과가 executionContextObj안의 variableObject가 된다.</p><p>여기에 JS가 어떻게 코드를 해석하는지 이해할 수 있는 코드가 있다.</p><ol><li>function을 호출하기 위해 코드를 검색한다.</li><li>function을 호출하기 전 해당 function의 Execution Context를 생성한다.</li><li><p>Create phases에 진입하면  </p><ul><li>Scope Chain을 초기화한다.</li><li>변수 객체(Variale object)를 생성한다.<ul><li>argument object를 만들고, parameter들을 위해 context를 점검한다.</li><li>name과 value를 초기화 하고, reference copy를 만든다.</li><li><strong>function 선언을 위한 context를 스캔</strong><ul><li>각각의 function을 찾을 때마다. variable object안에 property를 만들고 이 property는 function 이름과 같으며 function의 메모리상 주소값을 가진다.</li><li>만약 function이름이 이미 존재하면, 주소값은 덮어 씌워진다.</li></ul></li><li><strong>변수 선언을 위한 스캔</strong><ul><li>변수 선언을 찾을 때마다, VO에 property가 만들어지고, property의 이름은 변수 이름으로 지정된다. 그리고 값은 <strong>undefined</strong>로 저장된다.</li><li>만약 변수 명이 이미 VO안에 존재한다면, 아무것도 하지않고 스캔을 이어간다.?</li></ul></li><li>context안에서의 <strong>this</strong>의 값을 결정한다.</li></ul></li></ul></li><li><p>Activation / Code Execution Stage</p><ul><li>코드가 한줄한줄 실행되면서 context안에서 function이 실행되고 변수에 값이 할당된다.</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> <span class="title">privateB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>foo(22)가 호출될때, <strong>Creation stage</strong>에서는 아래와 같은 일이 일어난다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fooExecutionContext = &#123;</span><br><span class="line">    scopeChain: &#123; ... &#125;,</span><br><span class="line">    variableObject: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">22</span>,</span><br><span class="line">            length: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        i: <span class="number">22</span>,</span><br><span class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">a</span>: <span class="title">undefined</span>,</span></span><br><span class="line"><span class="function">        <span class="title">b</span>: <span class="title">undefined</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">this</span>: </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  위 코드에서 볼 수 있듯, Creation Stage에서는 parameter와 arguments를 제외한 property들의 이름을 정의할 뿐, 그들에게 값을 할당하지 않는다.<br> Creation Stage가 끝나면 실행의 흐름이 함수로 들어오고 execution stage가 된다.<br> function이 끝날때 execution context object의 모습은 이렇다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fooExecutionContext = &#123;</span><br><span class="line">    scopeChain: &#123; ... &#125;,</span><br><span class="line">    variableObject: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            <span class="number">0</span>: <span class="number">22</span>,</span><br><span class="line">            length: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        i: <span class="number">22</span>,</span><br><span class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>),</span></span><br><span class="line"><span class="function">        <span class="title">a</span>: '<span class="title">hello</span>',</span></span><br><span class="line"><span class="function">        <span class="title">b</span>: <span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">privateB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">this</span>: </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hoisting-이란"><a href="#Hoisting-이란" class="headerlink" title="Hoisting 이란?"></a>Hoisting 이란?</h2><p>JS에서 Hoisting이란 변수와 함수 선언들이 그들의 상위 function scope로 부터 당겨져오는 현상을 의미한다. 왜 이러한 현상이 이러날까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">​(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo); <span class="comment">// function pointer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> bar); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">'hello'</span>,</span><br><span class="line">        bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'world'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;());​</span><br></pre></td></tr></table></figure><ul><li>어떻게 우리는 foo를 선언하기 전에 foo에 접근할 수 있을까?<ul><li>앞서 살펴본 바와 같이 Execution stage이전에 Create stage를 먼저 거치게되면서 함수의 흐림이 실행되기 시작할 때 foo는 이미 Activation Object에 선언된다.</li></ul></li><li>foo는 두번 선언되었는데 왜 undefined 혹은 string으로 덮어씌워지지 않고, function이 되었을까?<ul><li>foo가 두번 선언되었다하더라도, 변수들보다 activation object에 function들이 먼저 만들어져있고, function과 달리 변수는 property의 이름이 같을 경우 생략된다.</li><li>그러므로, function foo()에 대한 주소값이 처음 AO에 만들어지고, var foo에 도달했을 때, foo라는 property name이 존재하기때문에 아무것도 하지 않고, 계속 진행되는 것이다.</li></ul></li><li>bar는 왜 <strong>undefined</strong>일까?<ul><li>bar는 function을 값으로 할당 받은 ‘변수’ 일뿐이다. 앞서 살펴본 바와 같이 변수는 Creation Stage에서 undefined로 초기화된다.</li></ul></li></ul><p><strong>parameter vs arguments</strong><br><a href="https://stackoverflow.com/a/1788926/7940938" target="_blank" rel="noopener">Example</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i and f are the parameters, and anInt and 2.0 are the arguments.</span></span><br><span class="line"><span class="keyword">void</span> Foo(int i, float f)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do things</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bar()</span><br><span class="line">&#123;</span><br><span class="line">    int anInt = <span class="number">1</span>;</span><br><span class="line">    Foo(anInt, <span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # What is the Execution Context &amp; Stack in JavaScript? --&gt;
&lt;h1 id=&quot;자바스크립트에서-실행-컨텍스트-Execution-Context-와-Stack은-무엇일까&quot;&gt;&lt;a href=&quot;#자바스크립트에서
      
    
    </summary>
    
    
      <category term="javascript, stack, execution context, closure," scheme="https://ssouthpaw.github.io/tags/javascript-stack-execution-context-closure/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ssouthpaw.github.io/2017/11/30/hello-world/"/>
    <id>https://ssouthpaw.github.io/2017/11/30/hello-world/</id>
    <published>2017-11-29T16:46:08.000Z</published>
    <updated>2017-11-29T16:46:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
